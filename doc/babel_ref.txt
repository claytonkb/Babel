-- Babel Operator Reference

Examples shown in "proto-Babel" for now. This will be updated at some point
in the future when Bipedal is developed.

Note: Stack diagrams are shown under the "Stack effect" section. The item
next to the vertical bar '|' is TOS (Top-Of-Stack), the arrow separates
before (LHS) and after (RHS) execution of the operator. Unless otherwise
indicated, the rest of the stack is left as-is.

Upper-case means "One or more pointers or values"
Lower-case means "a single value"

- Miscellaneous Operators

    - fnord
        Does nothing
        Stack effect:
            | -> |

    - hash8
        Hashes a sequence of bytes (hence the '8')

        Stack effect:
            {"string"}| -> {w x y z}|
            A hash is 4 mwords in size

- Arithmetic Operators

    Note: The arithmetic operators are all prefixed with 'c' because
    Babel will have its own native number format and arbitrary-precision
    arithmetic at some point in the future.

    - cuadd
        C-style unsigned addition
        Adds two mwords on TOS (Top-Of-Stack) 
    
        Example: 
            [ [{2}] [ [{3}] [ cuadd nil ]]]

            Leaves 5 on TOS

        Note: If you don't know what "unsigned" means then you shoud use 
        the 'ci' arithmetic operators.

        Stack effect:
            {a} {b}| -> {a+b}|

    - cusub
        C-style unsigned subtraction
        {a} {b}| -> {a-b}|

    - ciadd
        C-style integer addition
        {a} {b}| -> {a+b}|

    - cisub
        C-style integer subtraction
        {a} {b}| -> {a-b}|

    - ciabs
        C-style absolute-value
        {a}| -> {abs(a)}|

    - cumul
        C-style unsigned multiplication
        {a} {b}| -> {lo({a}*{b}) hi({a}*{b})}|

        Note: The result of multiplication is two mwords, so it is stored
        in a leaf array of size 2.

    - cudiv
        C-style unsigned division
        {a} {b}| -> {a/b}|

    - curem
        C-style unsigned remainder (usually termed "mod")
        {a} {b}| -> {a%b}|

    - cimul
        C-style integer multiplication
        {a} {b}| -> {lo(a*b) hi(a*b)}|

        See also: cumul

    - cidiv
        C-style integer division
        {a} {b}| -> {a/b}|

    - cirem
        C-style integer remainder (usually termed "mod")
        {a} {b}| -> {a%b}|

- Shift Operators

    - cushl
        C-style unsigned shift-left
        {a} {b}| -> {a<<b}|
        
    - cushr
        C-style unsigned shift-right
        {a} {b}| -> {a>>b}|
        
    - cashr
        C-style arithmetic shift-right
        {a} {b}| -> {a>>b}|

        Performs an arithmetic shift-right which is suitable for dividing 
        a signed (integer) value by a power of 2

    - curol
        C-style unsigned rotate-left
        {a} {b}| -> {a rol b}|

    - curor
        C-style unsigned rotate-left
        {a} {b}| -> {a ror b}|

- Logic Operators
    Babel has 16 logic operators F0-Ff. Each one implements the Boolean
    function of two bits whose numerical value when the truth-table is 
    read vertically is the number of the operator. Since most people don't
    know what this means, Babel also provides aliases for the ordinary 
    Boolean operators.

    - Fx
        {a} {b}| -> {a Fx b}|

    - cand
        C-style bitwise AND
        {a} {b}| -> {a & b}|
        
    - cnand
        C-style bitwise NAND
        {a} {b}| -> !{a & b}|

    - cor
        C-style bitwise OR
        {a} {b}| -> {a | b}|

    - cnor
        C-style bitwise NOR
        {a} {b}| -> !{a | b}|

    - cxor
        C-style bitwise XOR
        {a} {b}| -> {a ^ b}|

    - cxnor
        C-style bitwise XNOR
        {a} {b}| -> !{a ^ b}|

    - cnot
        C-style bitwise complement
        {a}| -> ~{a}|

- Comparison Operators

    - cne
        C-style not-equal
        {a} {b}| -> {a != b}|
        
    - ceq
        C-style equal
        {a} {b}| -> {a == b}|
        
    - cult
        C-style unsigned less-than
        {a} {b}| -> {a < b}|

    - cule
        C-style unsigned less-than-or-equal
        {a} {b}| -> {a <= b}|

    - cugt
        C-style unsigned greater-than
        {a} {b}| -> {a > b}|

    - cuge
        C-style unsigned greater-than-or-equal
        {a} {b}| -> {a >= b}|

    - cilt
        C-style integer less-than
        {a} {b}| -> {a < b}|

    - cile
        C-style integer less-than-or-equal
        {a} {b}| -> {a <= b}|

    - cigt
        C-style integer greater-than
        {a} {b}| -> {a > b}|

    - cige
        C-style integer greater-than-or-equal
        {a} {b}| -> {a >= b}|

- I/O Operators

    - cprintf
        "C-style printf()"

        Permits printing of C-style (null-terminated) strings with a format
        specifier.

        {x} {"format-specifier"}| -> |

        Prints x according to a standard printf() format specifier.

        Prefer stdout

    - cprints
        "C-style printf('%s')"

        Similar to cprintf but prints a plain-string

        {"C-string"}| -> |

        Prefer stdout

    - slurp8
        Named after the Perl idiom

        Slurps an entire file to an array8
        {"filename"}| -> {X}|

        X is the contents of the named file.

    - spit8
        Play on words - opposite of slurp. Writes an array8 to file. 
        Overwrites existing file. Creates file if it does not exist.
        {X} {"filename"}| -> |

    - journal8
        Same as spit8 but appends to existing file. Creates file if it does
        not exist.
        {X} {"filename"}| -> |

    - stdout
        Prints a string to STDOUT (standard output)
        {"string"}| -> |

    - stdinln
        Reads from STDIN (standard input) until newline
        | -> {"string"}|

- Array Operators

    - s
        Reads the s-field and places it on TOS
        {X}| -> {s(X)}|
        [X]| -> {s(X)}|

    - arlen
        Puts the array length on TOS
        {X}| -> {len(X)}|
        [X]| -> {len(X)}|

    - arlen8
        Puts the 8-bit array length on TOS
        {X}| -> {len8(X)}|
        [X]| -> {len8(X)}|

    - islf
        Tests if TOS is a leaf-array
        {X}| -> {1}|
        [X]| -> {0}|

    - isin
        Tests if TOS is an interior-array
        {X}| -> {0}|
        [X]| -> {1}|

    - w
        Writes array X into array Y at offset z. Leaves the result on TOS.
        {X} {Y} {z}| -> {Y written with X at z}|
        [X] [Y] {z}| -> [Y written with X at z]|

        If len(X)+z > len(Y), then the write is truncated

    - slice
        Puts a slice of an array on TOS
        {X} {a} {b}| -> {X[a..b]}|
        [X] {a} {b}| -> [X[a..b]]|

        Read [a..b] as "from a to b", not as an interior-array

    - mu
        "Memory usage" - by analogy to Unix 'du'
        Returns the total memory usage of the object on TOS measured in 
        mwords.
        {X}| -> {mu(X)}|
        [X]| -> {mu(X)}|

        This operator is recursive

    - nlf
        "Number of leaf-arrays"
        Returns the total number of leaf-arrays in the object on TOS
        {X}| -> {1}|
        [X]| -> nlf(X)|

        This operator is recursive

    - nin
        "Number of interior-arrays"
        Returns the total number of interior-arrays in the object on TOS
        {X}| -> {0}|
        [X]| -> nin(X)|

        This operator is recursive

    - nva
        "Number of values"
        Returns the total number of values in the object on TOS
        {X}| -> {nva(X)}|
        [X]| -> {nva(X)}|

        This operator is recursive

    - npt
        "Number of pointers"
        Returns the total number of pointers in the object on TOS
        {X}| -> 0|
        [X]| -> npt(X)|

        This operator is recursive

    - newlf
        Creates a new leaf-array of size x and leaves it on TOS
        {x}| -> {leaf-array-of-size-x}|

    - newin
        Creates a new interior-array of size x and leaves it on TOS
        {x}| -> {interior-array-of-size-x}|

    - del
        Named after the C++ operator

        Frees (de-allocates) a leaf-array or interior array created with 
        the newlf or newin operators

    - cp
        Named after the Unix command.

        Does a deep-copy of all values.

        [X]| -> [copy-of-X]|

        Example:
            [ [ [{0} [{1}]] ] [ cp nil ]]

            There is now [ [{0} [{1}]] ] on TOS but the original object
            still exists as-is.

        This operator is recursive.            

    - trunc
        Truncates an array X to length y:
        {X} {y}| -> {X[0..y]}|
        [X] {y}| -> [X[0..y]]|

    - cxr
        By analogy to Lisp's car/cdr, where car = c0r and cdr = c1r, etc.

        Returns the xth element of an array Y:

        {Y} {x}| -> {Y[x]}|
        [Y] {x}| -> [Y[x]]|

- String operators

    - str2ar
        "Convert string to array"

        "Expands" a string so that each character is one value of a leaf-
        array. The input string must be valid UTF-8 (UTF-8 is a superset
        of ASCII) and each value of the resulting array will be the 
        Unicode codepoint corresponding to each UTF-8 character.

        {"string"}| -> {X}|

        Where X is a leaf-array of Unicode code-points.

    - ar2str
        "Convert array to string"
        Undoes str2ar, see above.

        {X}| -> {"string"}|

    - cu2dec
        Converts an C-style unsigned value to its ASCII decimal 
        representation

        {x}| -> {"string"}|
    
    - ci2dec
        Converts an C-style integer value to its ASCII decimal 
        representation

        {x}| -> {"string"}|

    - dec2ci
        Undoes ci2dec, see above

    - dec2ci
        Undoes ci2dec, see above

    - cu2hex
        Converts an C-style unsigned value to its ASCII hexa-decimal 
        representation

        {x}| -> {"string"}|

    - hex2cu
        Undoes cu2hex, see above

- List Operators

    - car
        Named after the venerable Lisp operator
        Returns the left side of a cons

        [cons(X,Y)]| -> {X}|
        [cons(X,Y)]| -> [X]|

        Equivalent to: 0 cxr (see above)

    - cdr
        Named after the venerable Lisp operator
        Returns the right side of a cons

        [cons(X,Y)]| -> {Y}|
        [cons(X,Y)]| -> [Y]|

    - isnil
        Tests if TOS is nil
        [nil]| -> {1}|
        {X}|   -> {0}|
        [X]|   -> {0}|

        For all X != nil

    - cons
        Named after the venerable Lisp operator
        Constructs one list from two
        [X] [Y]| -> [cons(X, Y)]|

        Note: 
            [X] [Y] cons car     Leaves [X] on TOS
            [X] [Y] cons cdr     Leaves [Y] on TOS

    - uncons
        Undoes cons
        [cons(X, Y)]| -> [X] [Y]|

    - push
        Similar to cons, but reverses the car and cdr:
        [X] [Y]| -> [cons(Y, X)]|

        Read "Push X onto Y"

        Note: 
            [X] [Y] push car     Leaves [Y] on TOS
            [X] [Y] push cdr     Leaves [X] on TOS

    - pop
        Undoes push. Similar to uncons but reverse the car and cdr:
        [cons(Y,X)]| -> [X] [Y]|


- Utility Operators

    - rand
        Places an array of x random values on TOS. Uses the Mersenne Twister
        PRNG.
        {x}| -> {R}|

        len(R) = x, each value of R is pseudo-random

    - sleep
        Pauses execution for x seconds:
        {x}| -> |

    - argv
        Named after the C identifier

        Places a list of strings on the stack corresponding to the arguments 
        passed to Babel on the commandline.
        | -> [args]|

- Stack Operators

    - zap
        Named after the Joy operator
        Removes the TOS

    - sel
        Selects one of the top two values on the stack:
        {f} {X} {Y}| -> {X}|
        {t} {X} {Y}| -> {Y}|
        {f} [X] {Y}| -> [X]|
        {t} [X] {Y}| -> {Y}|
        etc.

        Where f = 0 and t != 0

    - dup
        Named after the Joy operator
        Duplicates the TOS. Shallow-copy.
        {X}| -> {X} {X}|
        [X]| -> [X] [X]|

    - swap    
        Named after the Joy operator
        Swaps the top two items on the stack.
        {X} {Y}| -> {Y} {X}|
        [X] {Y}| -> {Y} [X]|
        etc.

- Eval Operators

    - eval
        Named after the Perl function
        Evaluates TOS
        [X]| -> |

    - goto
        Classic goto
        [X]| -> |

    - call
        Saves the current location in code, then does a goto
        [X]| -> |

    - ret
        Returns to the last location saved by a call
        | -> |

    - loop
        Like eval but loops indefinitely. Use 'last' or 'next' to control 
        loop behavior.
        [X]| -> |

    - last
        Breaks out of current loop

    - next
        Goes to next iteration of current loop

    - while
        Classic while

- Babel Virtual Machine (BVM) Operators

    - bvmroot
        Puts the root pointer to the entire virtual-machine on TOS
        | -> [bvmroot]|

    - bbl2gv
        Prints TOS to STDOUT in Graphviz dot-language format

    - load
        Flattens a relative-offset Babel structure into its literal 
        memory pointer footprint. This operator is applied by the 
        interpreter to a Babel file when it is initially loaded from file 
        into memory.

